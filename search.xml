<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ALBERT</title>
    <url>/2020/07/20/ALBERT/</url>
    <content><![CDATA[<hr>
<h4 id="论文简介"><a href="#论文简介" class="headerlink" title="论文简介"></a>论文简介</h4><p>&emsp;&emsp;在预训练的时候，通过增大模型大小可以有效提升模型在下游任务的表现，但是模型大小会受到GPU/TPU内存大小和训练时间的限制。为了解决这些问题，我们提出了两个降低模型参数的方法来降低BERT的内存占用以及提升训练速度。实验表明我们模型比原有BERT模型规模更小，同时我们使用了自监督损失来建模句子内部的相关性，能够有效提升模型在具有多个句子输入的下游任务的效果。在具有更少参数的情况下，我们的模型在多个任务建立了SOTA的效果。</p>
<a id="more"></a>
<h4 id="待解决的问题和方法"><a href="#待解决的问题和方法" class="headerlink" title="待解决的问题和方法"></a>待解决的问题和方法</h4><p>&emsp;&emsp;本文在原有的BERT的基础上增加了一倍的隐藏层大小，从1024增加到2048，但是从实验结论上来看，模型效果反而下降了，说明单纯增加模型参数并不能提升模型效果。为了在不改变模型结构的条件下减少模型参数，并提升训练速度，本文提出了两种方法。</p>
<ul>
<li>对词向量大小进行因式分解，将隐层大小和词向量大小解耦合</li>
<li>跨层参数共享</li>
<li>采用SOP（sentence-order prediction）任务代替NSP任务</li>
</ul>
<p>&emsp;&emsp;通过上面两种方法还有正则的效果，并提升了模型训练的稳定性。</p>
<h4 id="ALBERT"><a href="#ALBERT" class="headerlink" title="ALBERT"></a>ALBERT</h4><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><p>&emsp;&emsp;词向量表示大小$E$,编码层数目$L$，隐藏层大小$H$，前向层大小$4H$，attention头数$H/64$。</p>
<h5 id="词向量矩阵因式分解"><a href="#词向量矩阵因式分解" class="headerlink" title="词向量矩阵因式分解"></a>词向量矩阵因式分解</h5><p>&emsp;&emsp;在BERT，RoBERTa和XLNet中，词向量的大小$E$和隐藏层大小$H$是一样的，但是这个方法会有以下两个问题。</p>
<ul>
<li>词向量的大小$E$学习到的是上下文无关的表示，隐藏层大小$H$学习到的是上下文相关的表示，而对于BERT来说模型的能力主要来源于上下文的表示，所以$H$一般有比较大的值，所以将$E$和$H$解耦合能够有效降低参数量</li>
<li>在实际应用中，模型的词表大小$V$一般都很大，如果$E$的值也比较大的话，那么整个词向量矩阵大小为$V*E$，参数量将非常大，在更新的时候大多数参数都会很少被更新。  </li>
</ul>
<p>&emsp;&emsp;基于上面的理由，我们将词向量映射到较小的$E$，然后再映射到$H$，这样就可以打破$E \equiv H$的限制，词向量矩阵的大小从$O(V \times H) $降低到$O(V \times E+E \times H)$，其中$H \gg E$。本质上就是在降低了词向量的大小，然后加上一层全连接层将维度映射到$H$。</p>
<h5 id="参数共享"><a href="#参数共享" class="headerlink" title="参数共享"></a>参数共享</h5><p>&emsp;&emsp;根据transformer的结构，参数共享可以包括以下几种：1、共享FFN的参数；2、共享attention层的参数；3、同时共享FFN和attention层参数。<br>&emsp;&emsp;同时还比较了BERT和ALBERT输入和输出之间L2距离和cos距离，结果表明在ALBERT中，层与层之间的输入、输出转换更加光滑。</p>
<h5 id="SOP任务"><a href="#SOP任务" class="headerlink" title="SOP任务"></a>SOP任务</h5><p>&emsp;&emsp;在BERT中除了采用MLM任务，还加入了NSP任务，该任务是判断两个句子是否是连贯的两个句子，正样本是同个文档里连贯的两句话，负样本是从两个不同的文档中分别抽取的句子。有几篇论文讨论了NSP任务的有效性，发现去除NSP任务之后模型效果反而会有提升。<br>&emsp;&emsp;本论文认为NSP任务之所以没有效果是因为这个任务太简单了，这个任务选取了两个不同文档的句子作为负样本，这样就同时为该任务引入了文档主题信息，而主题分类的任务比句子连贯性的任务要简单得多。所以NSP任务并没有起到原有的效果。（而BERT论文在进行消融实验的时候发现NSP任务还是有效果的，RoBERTa论文中认为有可能是在进行消融实验的时候只把NSP任务去除了，但是有部分训练语料的句子对还是随机在两个文档中获取到的，导致效果会降低）<br>&emsp;&emsp;为了解决NSP过于简单的问题，论文中提出了SOP任务，即预测两个句子的顺序是否正常。正样本的产生方法还是和BERT一样，在产生负样本的时候，还是从同个文档中获取到连续的两个句子，然后颠倒两者的顺序。从这可以看出，SOP任务避免引入了主题信息，使模型更加注重于学习句子的连贯性。而且SOP任务训练出来的模型可以在一定程度上解决NSP任务，但是NSP任务却无法解决SOP任务。</p>
<h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>&emsp;&emsp;1、本论文采用了n-gram掩码，n大小按照以下公式进行选择，n最大为3。<br>$$p(n) = \frac{\frac{1}{n}}{\sum_{k=1}^N\frac{1}{k}}$$</p>
<p>&emsp;&emsp;2、在进行模型大小调整的时候，主要调整的是宽度而不是深度。<br><img src="/images/ALBERT-model-size.png" alt="image"><br>&emsp;&emsp;3、<strong>从下面结果可以看出来如果只是采用参数共享，不增加模型大小的话，ALBERT的效果是不如BERT的。</strong> 但是通过增加层数和隐层大小，ALBERT在保持参数量低于BERT的前提下，在各个任务上可以得到更优的效果。<br>&emsp;&emsp;由于模型整体结构并没有大改变，ALBERT对于训练速度和推理速度并没有明显提升，只是降低了参数量。(在实验ALBERT和BERT的时候，同样的结构大小，同样的数据，ALBERT训练30个epoch，batch大小为64，，每个样本大约耗时2ms，训练时间为11个小时。BERT训练50个epoch，batch为大小128，每个样本大约耗时2.2ms,训练时间为22个小时。说明ALBERT的训练数据有所提升，但不是很明显)<br><img src="/images/ALBERT-result.png" alt="image"><br>&emsp;&emsp;4、在没有进行参数共享时，词向量大小$E$越大，模型效果越好；但是在参数共享的条件下，$E=128$时效果最佳。<br><img src="/images/ALBERT-factorization.png" alt="image"><br>&emsp;&emsp;5、参数共享对模型效果有损伤，而且这损伤主要来源于FFN参数的共享，attention层参数的共享损伤较少<br><img src="/images/ALBERT-share.png" alt="image"><br>&emsp;&emsp;6、NSP任务对模型效果提升很小，SOP任务对模型效果提升很大<br><img src="/images/albert-sop.png" alt="image"><br>&emsp;&emsp;7、实验了不同深度和宽度的ALBERT，发现不断加大深度和宽度并不能一直提升模型效果，在后面效果会有个下降的过程。其实这应该也是可以理解的，当模型深度和宽度不断增加的时候，模型的训练难度也会增加。<br>&emsp;&emsp;8、同等的训练时间，ALBERT-xxlarge比BERT-large在平均准确率上仍然有1.5%的提升<br>&emsp;&emsp;9、去除dropout对模型效果有提升。</p>
]]></content>
      <categories>
        <category>论文阅读</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>RoBERTa</title>
    <url>/2020/07/20/RoBERTa/</url>
    <content><![CDATA[<hr>
<h4 id="论文简介"><a href="#论文简介" class="headerlink" title="论文简介"></a>论文简介</h4><p>&emsp;&emsp;这篇论文发现当前的BERT是没有充分训练的，如果经过好好调参的话，BERT是可以比后BERT时代的模型效果要好的。而且由于训练是很耗费资源和时间的，所以很多预训练模型都无法进行系统的比较。<br>&emsp;&emsp;本论文对于BERT的改进主要有以下几点：1、在更多数据上进行更长时间的训练，同时采用更大的batch；2、去除NSP任务；3、在更长句子维度上进行训练；4、在训练过程中动态调整mask。同时收集了一个新的数据集（CC-NEWS）。</p>
<a id="more"></a>
<h4 id="BERT介绍"><a href="#BERT介绍" class="headerlink" title="BERT介绍"></a>BERT介绍</h4><p>&emsp;&emsp;<strong>MLM任务</strong>,随机选择15%的token进行mask，其中80%替换为MASK，10%保持不变，10%替换为别的token。在BERT中是在整个预训练的数据集中重复10次，即相当于生成10倍的训练样本，保存之后在后面的训练过程中就保持不变了。<br>&emsp;&emsp;<strong>NSP任务</strong>，预测输入的两个句子在原文中是不是上下文的关系。</p>
<h5 id="原BERT的参数设置"><a href="#原BERT的参数设置" class="headerlink" title="原BERT的参数设置"></a>原BERT的参数设置</h5><ul>
<li>采用Adam优化器，$beta_1=0.9, beta_2=0.999, \varepsilon=1e-6$，学习率采用的是warm up策略，前10000个 step达到峰值1e-4，后面再递减</li>
<li>所有层的dropout都是0.1</li>
<li>模型训练1000000个step，batch为256，句长为512</li>
</ul>
<h5 id="本文复现BERT的参数设置"><a href="#本文复现BERT的参数设置" class="headerlink" title="本文复现BERT的参数设置"></a>本文复现BERT的参数设置</h5><ul>
<li>根据具体设置调整了峰值学习率和warmup步数</li>
<li>训练过程对Adam优化器的$\varepsilon$参数非常敏感</li>
<li>在batch比较大的情况下，设置$beta_2=0.98$有利于提高训练稳定性</li>
<li>训练BERT的时候前90%的时间是采用较短的句长？？？（但是在bert源码中没看到这部分代码，只是在生成mask训练样本的时候，会有10%生成较短的文本，代码给出的解释是为了使bert在短文本问题中也能使用，而不会受限于512的文本长度）。在本文中均采用512长度的文本进行训练</li>
</ul>
<h4 id="论文改进"><a href="#论文改进" class="headerlink" title="论文改进"></a>论文改进</h4><h5 id="动态掩码和静态掩码"><a href="#动态掩码和静态掩码" class="headerlink" title="动态掩码和静态掩码"></a>动态掩码和静态掩码</h5><p>&emsp;&emsp;BERT是在训练之前就已经将训练数据处理好了，本论文是在训练过程中对数据进行mask，从结果来看动态掩码效果有提升，但不是很明显。<br><img src="/images/roberta-mask.png" alt="image"></p>
<h5 id="不同文档分割方式和NSP任务"><a href="#不同文档分割方式和NSP任务" class="headerlink" title="不同文档分割方式和NSP任务"></a>不同文档分割方式和NSP任务</h5><p>&emsp;&emsp;分为四种情况进行实验：</p>
<ul>
<li>SEGMENT-PAIR+NSP：来自于一个或两个文档的多个句子组成总的输入，和原有的BERT论文一致</li>
<li>SENTENCE-PAIR+NSP：来自于一个或两个文档的单个句子，句子级别的</li>
<li>FULL-SENTENCES：来自于多个文档的句子，不同文档的句子之间用符号分隔，没有NSP</li>
<li>DOC-SENTENCES：来自于当个文档的句子，没有NSP  </li>
</ul>
<p>&emsp;&emsp;具体的结果如下：去除NSP任务后，效果有所提升；采用同个文档的训练效果比较好<br><img src="/images/roberta-nsp.png" alt="image"></p>
<h5 id="训练采用更大的batch-size"><a href="#训练采用更大的batch-size" class="headerlink" title="训练采用更大的batch_size"></a>训练采用更大的batch_size</h5><p>&emsp;&emsp;相比于BERT采用256的batch_size，本论文实验了更大的batch的影响，同时控制了模型对每个训练样本的利用次数是一致的，发现采用更大的batch，同时提高学习率，可以在一定程度提升模型效果。<br><img src="/images/roberta-batch.png" alt="image"></p>
<h5 id="文本编码方式"><a href="#文本编码方式" class="headerlink" title="文本编码方式"></a>文本编码方式</h5><p>&emsp;&emsp;采用byte-level的BPE代替character-level的BPE</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;在进行实验的时候，主要把以上四个方面给加入到模型中，主要是：动态掩码；去除NSP；大batch；byte-level的BPE。同时还实验了预训练数据集的大小和每个样本的训练轮数。结果表明更多数据和更长的训练时间可以提高模型效果（得到的结论都是符合直观理解的）。<br><img src="/images/roberta-train-longer.png" alt="image"></p>
]]></content>
      <categories>
        <category>论文阅读</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建个人博客</title>
    <url>/2020/07/26/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><p>&emsp;&emsp;本文记录下个人博客搭建的过程，是在mac系统搭建的博客，而且强依赖于github。默认需要以下条件都准备好了。搭建完成后的效果可以参考<a href="https://linhao0204.github.io/" target="_blank" rel="noopener">这里</a>。</p>
<ul>
<li>brew，mac系统的安装包管理，具体安装可以参考网上教程</li>
<li>github账号，而且熟悉基本的git操作<a id="more"></a>

</li>
</ul>
<h4 id="新建git仓库"><a href="#新建git仓库" class="headerlink" title="新建git仓库"></a>新建git仓库</h4><p>&emsp;&emsp;新建一个repository，并且名字需要为*.github.io，其中*为github的用户名。比如我的用户名是linhao0204，所以repository为linhao0204.github.io，而且必须为public。<br>&emsp;&emsp;新建完成后，在本地安装git，然后将仓库clone到本地。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install git</span><br><span class="line">git clone 你的仓库地址</span><br></pre></td></tr></table></figure>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>&emsp;&emsp;我们博客的搭建依赖于hexo，hexo是一个博客框架，我们只要在特定的文件夹下编写我们的博客就可以了，bexo可以帮助我们编译并上传部署到服务器上，我们这里采用的是github.io当做我们博客的服务器，hexo的具体介绍可以见<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">这里</a>。</p>
<h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>&emsp;&emsp;hexo是基于node.js的，所以需要安装node.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line">npm -v  # 检查是否安装完成</span><br></pre></td></tr></table></figure>
<h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init linhao0204.github.io  # 初始化hexo博客</span><br><span class="line">hexo g  # 编译生成博客</span><br><span class="line">hexo s  # 在本地预览博客</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在浏览器上输入<code>http://localhost:4000/</code>就可以在本地访问我们自己搭建的博客了。</p>
<h5 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h5><p>&emsp;&emsp;上面是部署在本地，但是我们要将自己的博客部署到github的服务器上，和我们前面创建的git仓库关联起来。在根目录的站点配置文件<code>_config.yml</code>中搜索<code>deploy</code>加入以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:linhao0204&#x2F;linhao0204.github.io.git  # 这里要换成上面创建的git仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;同时需要在当前博客目录下安装部署插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  # 安装部署插件</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;然后在当前博客目录下执行<code>deploy d</code>就可以部署到git服务器上了，在<code>https://你的git用户名.github.io/</code>就可以访问了。<br>&emsp;&emsp;到了这里的话博客的框架就搭建完成，有了个雏形了，下面根据我们个人需求进行修改。</p>
<h4 id="个人优化"><a href="#个人优化" class="headerlink" title="个人优化"></a>个人优化</h4><h5 id="修改站点信息"><a href="#修改站点信息" class="headerlink" title="修改站点信息"></a>修改站点信息</h5><p>&emsp;&emsp;上面完成的博客信息都是默认的，通过修改<code>_config.yml</code>配置文件可以更新为自己的信息，我自己修改的字段如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Linhao  # 博客名称</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;平时的一些记录和笔记&#39;  # 个人描述</span><br><span class="line">keywords:</span><br><span class="line">author: Linhao</span><br><span class="line">language: zh-CN  # 这字段可以选择博客显示为中文或者英文</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><p>&emsp;&emsp;hexo可以根据自己喜好选择不同的博客主题，我选择的是<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next主题</a>，将该主题clone下来到<code>theme/next</code>之后，需要修改站点配置文件<code>_config.yml</code>，将配置文件中的<code>theme:  landscape</code>改为<code>theme: next</code>。然后重新部署后就可以生效。<br>&emsp;&emsp;前面一直说到站点配置文件，在<code>theme/next/</code>中也有配置文件<code>_config.yml</code>，称之为主题配置文件，这里将主题配置文件里将用到的一些配置进行说明。</p>
<h6 id="修改主题排版"><a href="#修改主题排版" class="headerlink" title="修改主题排版"></a>修改主题排版</h6><p>&emsp;&emsp;next主题有多个排版，通过修改<code>Schemes</code>可以选择对应排版，我选择的是<code>Pisces</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<h6 id="菜单栏显示"><a href="#菜单栏显示" class="headerlink" title="菜单栏显示"></a>菜单栏显示</h6><p>&emsp;&emsp;通过修改<code>menu</code>中的配置，可以在菜单栏里添加自己需要的模块，添加完成后需要通过<code>hexo new page &quot;categories&quot;</code>来生成对应的主页，在<code>source/</code>目录下会生成对应目录<code>categories</code>。然年通过菜单栏点击进去后会进入对应的网页。这里需要注意的是需要在生成的<code>source/categories/index.md</code>文件中添加<code>type: &quot;categories&quot;</code>，否则添加的类别将不会自动更新。<code>tags</code>目录也是类似的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  #about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line">  # tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br></pre></td></tr></table></figure>
<h6 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h6><p>&emsp;&emsp;头像存放在<code>/themes/next/source/images/</code>目录下，将自己的头像放到该目录下之后，修改配置文件中的以下字段即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: &#x2F;images&#x2F;avatar.jpeg  # 换为自己的头像文件名</span><br></pre></td></tr></table></figure>
<h6 id="增加社交账号"><a href="#增加社交账号" class="headerlink" title="增加社交账号"></a>增加社交账号</h6><p>&emsp;&emsp;在配置文件中搜索<code>Social Links</code>，选择对应的选项之后即可。</p>
<h6 id="搜索和增加文章概况"><a href="#搜索和增加文章概况" class="headerlink" title="搜索和增加文章概况"></a>搜索和增加文章概况</h6><p>&emsp;&emsp;如果博客中文章过多的话，next支持本地搜索，通过安装<code>npm install hexo-generator-searchdb --save</code>，然后在配置文件中修改<code>local_search</code>为<code>True</code>，最后需要在站点配置文件<code>_config.yml</code>（注意不是主题配置文件，这部分修改的默认都在主题配置里，这里是站点配置文件）添加以下配置。重启后就可以生效了，有的生效时间会比较久，需要耐心等待。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;next也支持统计每篇博文的字数，并显示大约阅读时长，安装<code>npm install hexo-wordcount --save</code>和<code>npm install hexo-symbols-count-time --save</code>,然后在配置文件中将<code>symbols_count_time</code>设置为<code>True</code>，最后也需要在站点配置文件里添加以下配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 统计文章时间</span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>
<h6 id="博文预览"><a href="#博文预览" class="headerlink" title="博文预览"></a>博文预览</h6><p>&emsp;&emsp;next主题默认在首页会把博文全文都展示出来，这样在博文比较多的时候会比较乱，所以我们可以开启预览的功能，就是在首页只显示博文的部分内容，这个可以通过在博文中加入<code>&lt;!--more--&gt;</code>，这样首页只会显示之前的部分内容。</p>
<h5 id="开启gitalk评论"><a href="#开启gitalk评论" class="headerlink" title="开启gitalk评论"></a>开启gitalk评论</h5><p>&emsp;&emsp;如果需要在博文中支持评论，next支持各种方式实现，我选用的是gitalk，这个需要我们在github上申请一个<code>OAuth Apps</code>和新建一个仓库用于保存评论。</p>
<h6 id="申请Apps"><a href="#申请Apps" class="headerlink" title="申请Apps"></a>申请Apps</h6><p>&emsp;&emsp;在自己的github主页，通过右上角的<code>setting-Developer settings-Developer settings</code>即可申请，可以按照以下填写信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application name: # 可以随意填写</span><br><span class="line">Homepage URL: # 博客主页，比如我的是https:&#x2F;&#x2F;linhao0204.github.io&#x2F;</span><br><span class="line">Authorization callback URL: # 填的也是https:&#x2F;&#x2F;linhao0204.github.io&#x2F;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;申请之后生成一个<code>Client ID</code>和<code>Client Secret</code>，后面在修改配置文件的时候会用到这两个。</p>
<h6 id="申请仓库"><a href="#申请仓库" class="headerlink" title="申请仓库"></a>申请仓库</h6><p>&emsp;&emsp;和前面申请仓库的流程是一致的，可以随意命名，比如我的是<code>blog-comment</code>。</p>
<h6 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h6><p>&emsp;&emsp;按照以下修改主题配置文件，重新部署后，登录github账号后即可生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 选择支持评论的方式，这里采用gitalk</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: gitalk</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># For more information: https:&#x2F;&#x2F;gitalk.github.io, https:&#x2F;&#x2F;github.com&#x2F;gitalk&#x2F;gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: linhao0204 # 个人的github用户名</span><br><span class="line">  id: location.pathname</span><br><span class="line">  repo: blog-comment # 这是上面新建的仓库名</span><br><span class="line">  client_id:  # 申请Apps时获取到的id</span><br><span class="line">  client_secret:  # 申请Apps时获取到的密码</span><br><span class="line">  admin_user: [&quot;linhao0204&quot;] # 这里需要增加管理员用户，可以初始化issue，否则会提示”未找到相关的 Issues 进行评论“</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>
<h5 id="支持mathjax"><a href="#支持mathjax" class="headerlink" title="支持mathjax"></a>支持mathjax</h5><p>&emsp;&emsp;如果博文中需要支持公式编辑的话，需要在站点配置文件中开启支持mathjax，同时也需要在博文头部添加<code>mathjax: true</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  per_page: false  # 由于公式显示会比较耗时，只在有需要的博文中才使用，所以这里置为false</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # See: https:&#x2F;&#x2F;mhchem.github.io&#x2F;MathJax-mhchem&#x2F;</span><br><span class="line">    mhchem: true</span><br></pre></td></tr></table></figure>
<h5 id="博文编辑器"><a href="#博文编辑器" class="headerlink" title="博文编辑器"></a>博文编辑器</h5><p>&emsp;&emsp;在编辑markdown文件中，比较痛苦的就是图片和预览。往markdown中添加图片，picgo可以实现复制，然后上传直接获取图片链接，最后可以直接将链接拷贝到文档中，算是比较方便的，但是需要一个合适的图床。网上有很多图床教程，别人推荐比较多的是采用七牛云，但是得实名注册，也有使用github作为图床的，但是最近好像不能使用了。所以我还是将图片放在github的项目下，图片也不会有很多。  &emsp;&emsp;hexo提供了一个网页插件，通过<code>npm install hexo-admin --save</code>安装之后就可以在<code>http://localhost:4000/admin</code>上直接编辑博文了。这个插件的好处就是编辑markdown的时候，可以直接将图片拷贝到文章里，然后会直接将图片保存到<code>source/images/</code>下，非常方便。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="项目下的-gitignore文件"><a href="#项目下的-gitignore文件" class="headerlink" title="项目下的.gitignore文件"></a>项目下的.gitignore文件</h5><p>&emsp;&emsp;项目下有部分文件不是必须的，可以不用提交到git上，比如<code>node_modules</code>文件夹下的东西只是用于本地编译。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 忽略一些本地编译的东西</span><br><span class="line">public&#x2F;</span><br><span class="line">db.json</span><br><span class="line">.idea&#x2F;</span><br><span class="line">.deploy_git&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line"></span><br><span class="line"># mac系统的东西</span><br><span class="line">*.DS_Store</span><br></pre></td></tr></table></figure>
<h5 id="sublime支持markdown实时预览和mathjax"><a href="#sublime支持markdown实时预览和mathjax" class="headerlink" title="sublime支持markdown实时预览和mathjax"></a>sublime支持markdown实时预览和mathjax</h5><p>&emsp;&emsp;因为我刚开始打算采用sublime编辑器作为md编辑器，所以也看了下相关配置，这里记录一下。</p>
<h6 id="支持markdown实时预览"><a href="#支持markdown实时预览" class="headerlink" title="支持markdown实时预览"></a>支持markdown实时预览</h6><ul>
<li>打开sublime，通过组合键<code>Ctrl+Shift+P</code>调出命令面板</li>
<li>输入<code>Package Control: Install Package</code>，回车</li>
<li>分别输入<code>MarkdownEditing</code>，<code>MarkdownPreview</code>，<code>LiveReload</code>后回车即可安装</li>
</ul>
<p>&emsp;&emsp;<code>MarkdownEditing</code>是md文本编辑插件。<code>MarkdownPreview</code>支持网页预览，但是不会实时自动更新，通过在<code>Preferences -&gt; Key Bindings</code>添加以下语句后，通过快捷键<code>&quot;command+m&quot;</code>就可以进行预览。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	&#123; &quot;keys&quot;: [&quot;command+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125;  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;为了实现实时预览，就需要安装<code>LiveReload</code>了。安装完成后需要检查<code>Preferences -&gt; Package Settings -&gt; Markdown Preview -&gt; setting</code>配置文件中的<code>enable_autoreload</code>是否为<code>True</code>。同时需要通过<code>Preferences -&gt; Package Settings -&gt; LiveReload -&gt; Plugins -&gt; Enable/disable plugins</code>将实时预览功能开启。这样设置之后，每次保存之后网页就可以实时预览了。</p>
<h6 id="支持mathjax-1"><a href="#支持mathjax-1" class="headerlink" title="支持mathjax"></a>支持mathjax</h6><p>&emsp;&emsp;在预览的时候，公式无法正常显示，需要在<code>Markdown Preview</code>的<code>user setting</code>中添加以下配置。</p>
<details>
  <summary>展开</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;enable_mathjax&quot;: true,</span><br><span class="line">    &quot;js&quot;: [</span><br><span class="line">    	&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js&quot;,</span><br><span class="line">        &quot;res:&#x2F;&#x2F;MarkdownPreview&#x2F;js&#x2F;math_config.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;markdown_extensions&quot;: [</span><br><span class="line">        &#x2F;&#x2F; Python Markdown Extra with SuperFences.</span><br><span class="line">        &#x2F;&#x2F; You can&#39;t include &quot;extra&quot; and &quot;superfences&quot;</span><br><span class="line">        &#x2F;&#x2F; as &quot;fenced_code&quot; can not be included with &quot;superfences&quot;,</span><br><span class="line">        &#x2F;&#x2F; so we include the pieces separately.</span><br><span class="line">        &quot;markdown.extensions.footnotes&quot;,</span><br><span class="line">        &quot;markdown.extensions.attr_list&quot;,</span><br><span class="line">        &quot;markdown.extensions.def_list&quot;,</span><br><span class="line">        &quot;markdown.extensions.tables&quot;,</span><br><span class="line">        &quot;markdown.extensions.abbr&quot;,</span><br><span class="line">        &quot;pymdownx.betterem&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;markdown.extensions.codehilite&quot;: &#123;</span><br><span class="line">                &quot;guess_lang&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; Extra&#39;s Markdown parsing in raw HTML cannot be</span><br><span class="line">        &#x2F;&#x2F; included by itself, but &quot;pymdownx&quot; exposes it so we can.</span><br><span class="line">        &quot;pymdownx.extrarawhtml&quot;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; More default Python Markdown extensions</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;markdown.extensions.toc&quot;:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;permalink&quot;: &quot;\ue157&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;markdown.extensions.meta&quot;,</span><br><span class="line">        &quot;markdown.extensions.sane_lists&quot;,</span><br><span class="line">        &quot;markdown.extensions.smarty&quot;,</span><br><span class="line">        &quot;markdown.extensions.wikilinks&quot;,</span><br><span class="line">        &quot;markdown.extensions.admonition&quot;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; PyMdown extensions that help give a GitHub-ish feel</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;pymdownx.superfences&quot;: &#123; &#x2F;&#x2F; Nested fences and UML support</span><br><span class="line">                &quot;custom_fences&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;name&quot;: &quot;flow&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;uml-flowchart&quot;,</span><br><span class="line">                        &quot;format&quot;: &#123;&quot;!!python&#x2F;name&quot;: &quot;pymdownx.superfences.fence_code_format&quot;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;name&quot;: &quot;sequence&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;uml-sequence-diagram&quot;,</span><br><span class="line">                        &quot;format&quot;: &#123;&quot;!!python&#x2F;name&quot;: &quot;pymdownx.superfences.fence_code_format&quot;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;pymdownx.magiclink&quot;: &#123;   &#x2F;&#x2F; Auto linkify URLs and email addresses</span><br><span class="line">                &quot;repo_url_shortener&quot;: true,</span><br><span class="line">                &quot;repo_url_shorthand&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;pymdownx.tasklist&quot;,     &#x2F;&#x2F; Task lists</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;pymdownx.tilde&quot;: &#123;  &#x2F;&#x2F; Provide ~~delete~~</span><br><span class="line">                &quot;subscript&quot;: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;pymdownx.emoji&quot;: &#123;  &#x2F;&#x2F; Provide GitHub&#39;s emojis</span><br><span class="line">                &quot;emoji_index&quot;: &#123;&quot;!!python&#x2F;name&quot;: &quot;pymdownx.emoji.gemoji&quot;&#125;,</span><br><span class="line">                &quot;emoji_generator&quot;: &#123;&quot;!!python&#x2F;name&quot;: &quot;pymdownx.emoji.to_png&quot;&#125;,</span><br><span class="line">                &quot;alt&quot;: &quot;short&quot;,</span><br><span class="line">                &quot;options&quot;: &#123;</span><br><span class="line">                    &quot;attributes&quot;: &#123;</span><br><span class="line">                        &quot;align&quot;: &quot;absmiddle&quot;,</span><br><span class="line">                        &quot;height&quot;: &quot;20px&quot;,</span><br><span class="line">                        &quot;width&quot;: &quot;20px&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;image_path&quot;: &quot;https:&#x2F;&#x2F;assets-cdn.github.com&#x2F;images&#x2F;icons&#x2F;emoji&#x2F;unicode&#x2F;&quot;,</span><br><span class="line">                    &quot;non_standard_image_path&quot;: &quot;https:&#x2F;&#x2F;assets-cdn.github.com&#x2F;images&#x2F;icons&#x2F;emoji&#x2F;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;pymdownx.arithmatex&quot;: &#123; </span><br><span class="line">                &quot;generic&quot;: true </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
